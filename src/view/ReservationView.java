/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.CustomerController;
import controller.ReservationController;
import controller.RoomCategoryController;
import controller.RoomController;
import dto.CustomerDto;
import dto.ReservationDto;
import dto.RoomCategoryDto;
import dto.RoomDto;
import entity.ReservationEntity;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nushan Vandabona
 */
public class ReservationView extends javax.swing.JFrame {

    private CustomerController customerController;
    private RoomController roomController;
    private RoomCategoryController roomCategoryController;
    private ReservationController reservationController;

    /**
     * Creates new form ReservationView
     */
    public ReservationView() {
        customerController = new CustomerController();
        roomController = new RoomController();
        roomCategoryController = new RoomCategoryController();
        reservationController = new ReservationController();
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        initializePackageTypeComboBox();
        loadReservations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancel = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReservation = new javax.swing.JTable();
        txtCheckInDate = new javax.swing.JTextField();
        txtCheckOutDate = new javax.swing.JTextField();
        lblCheckOutDate = new javax.swing.JLabel();
        btnSearchCustomerId = new javax.swing.JButton();
        lblCheckInDate = new javax.swing.JLabel();
        btnPlace = new javax.swing.JButton();
        lblPackageType = new javax.swing.JLabel();
        cmbPackageType = new javax.swing.JComboBox<>();
        lblCustomerId = new javax.swing.JLabel();
        txtCustomerId = new javax.swing.JTextField();
        lblRoomId = new javax.swing.JLabel();
        txtRoomId = new javax.swing.JTextField();
        btnSearchRoomId = new javax.swing.JButton();
        lblCustomerData = new javax.swing.JLabel();
        lblRoomData = new javax.swing.JLabel();
        lblTotalPrice = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblDisplayTotalPrice = new javax.swing.JLabel();
        btnGenerateTotalPrice = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCancel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCancel.setText("Cancel Reservation");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Manage Reservation");

        tblReservation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblReservation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblReservationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblReservation);

        txtCheckInDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtCheckOutDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblCheckOutDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCheckOutDate.setText("Check Out Date");

        btnSearchCustomerId.setText("Search");
        btnSearchCustomerId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCustomerIdActionPerformed(evt);
            }
        });

        lblCheckInDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCheckInDate.setText("Check In Date");

        btnPlace.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnPlace.setText("Place Reservation");
        btnPlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceActionPerformed(evt);
            }
        });

        lblPackageType.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPackageType.setText("Package Type");

        cmbPackageType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblCustomerId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCustomerId.setText("Customer Id");

        txtCustomerId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        lblRoomId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblRoomId.setText("Room Id");

        txtRoomId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnSearchRoomId.setText("Search");
        btnSearchRoomId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchRoomIdActionPerformed(evt);
            }
        });

        lblTotalPrice.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTotalPrice.setText("Total Price (Rs.)");

        jLabel1.setText("* Date Format : YYYY-MM-DD");

        btnGenerateTotalPrice.setText("Generate");
        btnGenerateTotalPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateTotalPriceActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Reservation Details");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)
                        .addComponent(lblCheckOutDate, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCheckOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(196, 196, 196))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblTotalPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(lblPackageType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCustomerId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRoomId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearchRoomId)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblRoomData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearchCustomerId)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblCustomerData, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbPackageType, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnGenerateTotalPrice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblDisplayTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnPlace)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCheckInDate)
                    .addComponent(txtCheckInDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCheckOutDate)
                    .addComponent(txtCheckOutDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCustomerId)
                        .addComponent(txtCustomerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearchCustomerId))
                    .addComponent(lblCustomerData, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblRoomId)
                        .addComponent(txtRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearchRoomId))
                    .addComponent(lblRoomData, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPackageType)
                    .addComponent(cmbPackageType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTotalPrice)
                        .addComponent(btnGenerateTotalPrice))
                    .addComponent(lblDisplayTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPlace)
                    .addComponent(btnCancel))
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        cancelReservation();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void tblReservationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReservationMouseClicked
        searchReservation();
    }//GEN-LAST:event_tblReservationMouseClicked

    private void btnSearchCustomerIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCustomerIdActionPerformed
        searchCustomer();
    }//GEN-LAST:event_btnSearchCustomerIdActionPerformed

    private void btnPlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceActionPerformed
        placeReservation();
    }//GEN-LAST:event_btnPlaceActionPerformed

    private void btnSearchRoomIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchRoomIdActionPerformed
        searchRoom();
    }//GEN-LAST:event_btnSearchRoomIdActionPerformed

    private void btnGenerateTotalPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateTotalPriceActionPerformed
        totalPrice();
    }//GEN-LAST:event_btnGenerateTotalPriceActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ReservationView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGenerateTotalPrice;
    private javax.swing.JButton btnPlace;
    private javax.swing.JButton btnSearchCustomerId;
    private javax.swing.JButton btnSearchRoomId;
    private javax.swing.JComboBox<String> cmbPackageType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCheckInDate;
    private javax.swing.JLabel lblCheckOutDate;
    private javax.swing.JLabel lblCustomerData;
    private javax.swing.JLabel lblCustomerId;
    private javax.swing.JLabel lblDisplayTotalPrice;
    private javax.swing.JLabel lblPackageType;
    private javax.swing.JLabel lblRoomData;
    private javax.swing.JLabel lblRoomId;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JTable tblReservation;
    private javax.swing.JTextField txtCheckInDate;
    private javax.swing.JTextField txtCheckOutDate;
    private javax.swing.JTextField txtCustomerId;
    private javax.swing.JTextField txtRoomId;
    // End of variables declaration//GEN-END:variables

    private void searchCustomer() {
        try {
            Integer customerId = Integer.parseInt(txtCustomerId.getText());
            CustomerDto customerDto = customerController.getCustomer(customerId);
            if (customerDto != null) {
                lblCustomerData.setText(customerDto.getCustomerName() + " | " + customerDto.getAddress() + " | " + customerDto.getPhoneNumber());
            } else {
                JOptionPane.showMessageDialog(this, "Customer Not Found");
            }
        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchRoom() {
        try {
            Integer roomId = Integer.parseInt(txtRoomId.getText());
            RoomDto roomDto = roomController.getRoom(roomId);
            if (roomDto != null) {
                RoomCategoryDto roomCategoryDto = roomCategoryController.getRoomCategory(roomDto.getCategoryId());
                lblRoomData.setText(roomDto.getRoomNumber() + " | " + roomCategoryDto.getCategoryName() + " | " + roomCategoryDto.getBasePrice() + " | " + roomDto.getStatus());
            } else {
                JOptionPane.showMessageDialog(this, "Room Not Found");
            }
        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initializePackageTypeComboBox() {
        cmbPackageType.setModel(new DefaultComboBoxModel<>());
        for (ReservationEntity.PackageType type : ReservationEntity.PackageType.values()) {
            cmbPackageType.addItem(type.toString());
        }
    }

    private void loadReservations() {
        try {
            String[] columns = {"Reservation ID", "Customer ID", "Room ID", "Check In Date", "Check Out Date", "Placed At", "Package Type", "Total Price", "Status"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            tblReservation.setModel(dtm);

            List<ReservationDto> reservationDtos = reservationController.getAll();
            for (ReservationDto reservationDto : reservationDtos) {
                Object[] rowData = {reservationDto.getReservationId(), reservationDto.getCustomerId(), reservationDto.getRoomId(), reservationDto.getCheckInDate(), reservationDto.getCheckOutDate(), reservationDto.getPlacedAt(), reservationDto.getPackageType(), reservationDto.getTotalPrice(), reservationDto.getStatus()};
                dtm.addRow(rowData);
            }
        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void placeReservation() {

        try {

            ReservationEntity.PackageType packageType = ReservationEntity.PackageType.valueOf(cmbPackageType.getSelectedItem().toString());

            Integer customerID = Integer.parseInt(txtCustomerId.getText());
            Integer roomId = Integer.parseInt(txtRoomId.getText());

            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date checkInDate = dateFormat.parse(txtCheckInDate.getText());
            Date checkOutDate = dateFormat.parse(txtCheckOutDate.getText());
            Date placedAt = new Date();

            ReservationDto reservationDto = new ReservationDto(checkInDate, checkOutDate, placedAt, customerID, roomId, packageType);

            String resp = reservationController.placeReservation(reservationDto);
            JOptionPane.showMessageDialog(this, resp);
            loadReservations();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void clear() {
        txtCheckInDate.setText("");
        txtCheckOutDate.setText("");
        txtCustomerId.setText("");
        txtRoomId.setText("");
        cmbPackageType.setSelectedItem("");

    }

    private void searchReservation() {
        Integer reservationId = (Integer) tblReservation.getValueAt(tblReservation.getSelectedRow(), 0);
        try {
            ReservationDto reservationDto = reservationController.getReservation(reservationId);
            if (reservationDto != null) {
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                txtCheckInDate.setText(dateFormat.format(reservationDto.getCheckInDate()));
                txtCheckOutDate.setText(dateFormat.format(reservationDto.getCheckOutDate()));
                txtCustomerId.setText(Integer.toString(reservationDto.getCustomerId()));
                txtRoomId.setText(Integer.toString(reservationDto.getRoomId()));
                cmbPackageType.setSelectedItem(reservationDto.getPackageType().toString());
                lblDisplayTotalPrice.setText(Double.toString(reservationDto.getTotalPrice()));
            } else {
                JOptionPane.showMessageDialog(this, "Reservation Not Found");
            }
        } catch (Exception e) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private void totalPrice() {
        try {

            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date checkInDate = dateFormat.parse(txtCheckInDate.getText());
            Date checkOutDate = dateFormat.parse(txtCheckOutDate.getText());

            // Convert java.util.Date to LocalDate
            LocalDate checkInLocalDate = checkInDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate checkOutLocalDate = checkOutDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

            Integer roomId = Integer.parseInt(txtRoomId.getText());
            RoomDto roomDto = roomController.getRoom(roomId);
            if (roomDto != null) {
                RoomCategoryDto roomCategoryDto = roomCategoryController.getRoomCategory(roomDto.getCategoryId());

                // Calculate the total price based on package type and room category's base price
                long daysBetween = ChronoUnit.DAYS.between(checkInLocalDate, checkOutLocalDate);
                double packageMultiplier = getPackageMultiplier(cmbPackageType.getSelectedItem().toString());
                double totalPrice = daysBetween * roomCategoryDto.getBasePrice() * packageMultiplier;
                lblDisplayTotalPrice.setText(Double.toString(totalPrice));
            } else {
                JOptionPane.showMessageDialog(this, "Room Not Found");
            }

        } catch (Exception e) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, e);
        }

    }

    private double getPackageMultiplier(String packageType) {
        switch (packageType) {
            case "FULL_BOARD":
                return 1.25;
            case "HALF_BOARD":
                return 1.15;
            case "BED_AND_BREAKFAST":
                return 1.05;
            default:
                return 1.0; // No package or unrecognized package type defaults to basic pricing
        }
    }

    private void cancelReservation() {
        try {
            Integer reservationId = (Integer) tblReservation.getValueAt(tblReservation.getSelectedRow(), 0);
            String resp = reservationController.deleteReservation(reservationId);
            JOptionPane.showMessageDialog(this, resp);
            loadReservations();
            clear();
        } catch (Exception e) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

}
